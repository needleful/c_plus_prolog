:- include(stdio).
:- consult('examples/meta_library').

struct position =>
	float var (x, y).

struct size =>
	float var (w, h).

struct my_struct =>
	int var cars;
	float var distance;
	size var m_size;
	position var pos.

func main =>
	my_struct var this = {
		cars = 12,
		distance = 12,
		m_size = {w = 100, h = 30},	
		pos = {x = 3009.9, y = -13.2}	
	};
	print(my_struct, this).

% We can't print unbound variables or they get instantiated,
% and that breaks nested expansion.
print(V, _) *=> V :- var(V), !, fail.
print(int, I) *=> printf("%d\n", I).
print(float, F) *=> printf("%f\n", F).
print(Struct, S) *=>
	printf("%s:\n", nameof(Struct));
	forall((FType, FName): Struct.fields) do (
		printf("\t%s: ", nameof(FName));
		print(FType, S.FName)
	);
	printf("end %s.\n", nameof(Struct))
:-	custom_data(inspected_struct(Struct)).
print(_, S) *=> printf("%s (can't print)\n", nameof(S)).